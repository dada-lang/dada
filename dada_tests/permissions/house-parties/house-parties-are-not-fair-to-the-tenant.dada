# Test that is intended to show the dangers
# of the "house party" rule. If we allow the
# lessor to read without violating the tenant's
# lease, that could permit the lessor to mutate
# atomic fields, but the tenant was assuming it
# had unique access to those fields.
#
# It turns out that, lacking a combined 
# "shared-lease" operation, and not having implemented
# atomic fields etc, it's hard to demonstrate this danger. =)
# But I'm pretty sure it's there.

class Accumulator(atomic list)
class List(field)

fn foo(accumulator) -> # shared List
{
    #! FIXME: Reading an atomic field without atomic section should not be allowed
    accumulator.list.lease.share
}

async fn main() {
    let a = Accumulator(list: List(22))

    # get a shared lease to the list,
    # but it is still owned by `a`
    let l = foo(a.lease)

    # try to share `a`, which fails because the lease
    # on `a` is still valid (due to `l`)
    let s = a.share #! RUN ERROR cannot access leased data

    print(l).await

    atomic {
        # can still modify `s.list`, but only
        # in an atomic section
        s.list = List() 
        #! FIXME: atomic writes not implemented
    }
}
