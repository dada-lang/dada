class Pair(a, b)

async fn main() {
    let pair1 = Pair(22, 44)
    let pair2 = Pair(pair1.lease, 66)

    let p = pair2.a.lease

    # Writing to `pair.a` causes the lease from `pair2.a`
    # to be unreachable. However, the owned value that backs
    # it is still live, so that's ok.
    pair2.a = Pair(23, 45)

    # `p` is still a valid leased object, and it points to
    # `pair1`.
    print(p).await #! OUTPUT Pair\(22, 44\)

    # we can output `pair1`
    print(pair1).await #! RUN ERROR cannot access leased data

    # and that will cancel `p`
    print(p).await
}